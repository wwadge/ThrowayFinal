package com.go.demo;

import org.junit.Assert;
import org.junit.Test;


import com.go.demo.model.*;
import com.go.demo.model.factories.*;
import com.go.demo.model.repository.*;
import com.go.demo.util.IPojoGenEntity;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.junit.runner.RunWith;
import org.springframework.transaction.annotation.Transactional;

/** Hibernate tester.
* @author autogenerated
*/
@SuppressWarnings("cast")
@org.springframework.boot.test.SpringApplicationConfiguration(classes = com.go.demo.ModelConfiguration.class)
@RunWith(SpringJUnit4ClassRunner.class)
public class DAOIntegrationTest {
		

	@Autowired
	AccountHolderRepository accountHolderRepository;



	
	/**
	 * Hibernate test case for table: postgres.godb.account_holder.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testAccountHolder() throws CloneNotSupportedException {

		AccountHolder accountHolder = GodbDataPoolFactory.getAccountHolder();
		accountHolder = accountHolderRepository.saveAndFlush(accountHolder);
		Long accountHolderId = accountHolder.getId();
		AccountHolder copy = accountHolder.clone();
		accountHolder = accountHolderRepository.findOne(accountHolderId); 	// load it again
	

		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getEmailAddress(), accountHolder.getEmailAddress());
		Assert.assertEquals(copy.getId(), accountHolder.getId());
		// tests for coverage completeness
		Assert.assertFalse(accountHolder.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(accountHolder.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}



}

